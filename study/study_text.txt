<< 매장 테이블 예약 서비스 >>


=============================== << ERD 작성 >> ===============================
- ERD 관계선 참고 블로그
  : https://eyecandyzero.tistory.com/246

1. JPA Entity에서 id를 int가 아닌 long 타입으로 선언하는 이유
   - 참고블로그 : https://lealea.tistory.com/237
   - 위의 글을 참고해 mysql의 id는 int, java의 entity는 long 타입으로 선언.
     (이렇게되면 데이터의 범위는 int까지 저장가능.)





=============================== << 비즈니스 프로세스 작성 >> ===============================
- 참고블로그
  : https://www.edrawsoft.com/kr/article/how-to-create-bpmn-diagram.html





=============================== << JPA >> ===============================
1. @MappedSuperclass
   : 객체 입장에서 공통 매핑 정보 필요 시 사용.
     공통 매핑 정보 필요 시, 부모 클래스에 선언하고 속성만 상속받아 사용하고 싶을 때 사용.
   - 해당 어노테이션이 선언되어 있는 클래스는 엔티티가 아니다.
     따라서 테이블과 별도로 매핑되지 않는다.
   - 직접 생성해 사용할 일이 없으므로 추상 클래스로 만드는 것이 권장된다.
   - JPA에서 @Entity 클래스는 @Entity 클래스 또는 @MappedSuperclass로 지정한 클래스만 상속가능.

   ex) 생성자, 생성시간, 수정자, 수정시간 등

  - 참고 블로그
    : https://ict-nroo.tistory.com/129


2. @EntityListeners(value={AuditingEntityListener.class})
   : 해당 클래스에 Auditing 기능을 포함.

   - JPA Auditing 활성화
     : @SpringBootApplication 어노테이션이 있는 Application.java 파일에 @EnableJpaAuditing 어노테이션을 추가해
       JPA Auditing 기능을 활성화 해야 사용가능.

   - JPA의 Auditing
     : JPA에서는 Audit 기능을 제공한다.
       Audit은 spring data JPA에서 시간에 대해 자동으로 값을 넣어주는 기능이다.
       도메일을 영속성 컨텍스트에 저장하거나 조회를 수행한 후 update 하는 경우 매번 시간 데이터를 입력해주어야하는데
       이 때 자동으로 시간을 매핑하여 데이터베이스의 테이블을 넣어주게 된다.

   - @CreatedDate : Entity가 생성되어 저장될 때 시간 자동 저장.
   - @LastModifiedDate : 조회한 Entity의 값을 변경할 때 시간 자동 저장.

   - 참고 블로그
     : https://webcoding-start.tistory.com/53





=============================== << @Transactional 사용시 DB에 자동저장 되지않는 문제 >> ===============================
- 발생문제
  @Transactional 자동 save, update 되지 않는 오류.
  : @Transactional 어노테이션을 이용하면 자동으로 DB에 저장된다고 알고있었다.
    Dirty Checking은 find~ 메서드 호출 후 snapshot을 찍어 해당 Entity의 변경 사항이 발생했는지 확인한다.
    나는 find 하지 않았기 때문에 Dirty Checking이 수행되지 않았다.
    그런데 save 호출 후 find한 뒤에 변경해도 Dirty Checking을 수행하지 않았다... 왜지..

  - 관련 내용 : JPA 와 영속성 (Dirty Checking)
https://velog.io/@aj4941/Transactional%EA%B3%BC-%EB%B3%80%EA%B2%BD-%EA%B0%90%EC%A7%80-Dirty-Checking
https://junior-datalist.tistory.com/349
https://velog.io/@yeongori/Dirty-Checking-is-Not-Working

- 발생원인
  : 기존 데이터 null값, 변경된 데이터도 null값이었기 때문에 실질적으로 변경사항이 전혀 없어서 update되지 않음.

- 해결방법
  : 실제 데이터를 변경해주니 정상동작했다.





=============================== << 스프링 시큐리티 >> ===============================
https://www.elancer.co.kr/blog/detail/235

0. 스프링 시큐리티 의존성 추가 시 api 호출 불가 에러발생
   - 발생에러
     : 스프링 시큐리티 의존성 추가 후 api 호출 시 401 에러 발생 -> api 호출 불가.

   - 발생원인
    : Spring Security 의존성을 추가하면 Client에서 API를 통해 요청 시
      인증계층(Filter Chain)을 거친 후 EventHandler를 거쳐 Controller로 가게 된다.
      여기서 인증계층(FilterChain)의 기본값은 모든 요청 막는다.
      우선 모든 경로에 대해 접근 허용하려했다.
      그래서 SecurityConfig 파일을 생성해 아래와 같이 securityFilterChain() 메서드를 생성했고
      모든 경로에 대해 접근 허가했지만 동일 오류가 발생했다.

      @EnableWebSecurity
      @RequiredArgsConstructor
      public class SecurityConfig {
          /** 인증관련설정: 자원별 접근권한 설정 */
          @Bean
          protected SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              // 1. 인증경로 설정
              http
                      .authorizeHttpRequests((authorizeRequests) ->
                                      authorizeRequests.anyRequest().permitAll());
              return http.build();
          }
      }

      검색해 찾은 답은 스프링 시큐리티가 적용된 애플리케이션에서
      HTTP POST 로 직접 엔드포인트를 호출할 때
      기본적으로는 CSRF 보호를 비활성화해주어야 호출이 가능하다는 것이었다.

   - 해결방법
     : 우선 인증계층(FilterChain)에서 원하는 Endpoint(호출경로)를 허용해 주어야 한다.
       따라서 우선적으로 모든 경로에 대해 허가하기 위해 위와같이 SecurityConfig 설정파일을 생성해
       인증허가경로를 추가해주었다.

       또한 호출하려했던 api는 POST 메서드를 사용하고 있었다.
       CSRF 보호를 비활성화 하기 위해 아래와 같이 http의 csrf 비활성화 설정코드를 추가해주었다.

       http
               // HTTP POST로 직접 엔드포인트 호출 시 기본적으로는 CSRF 보호를 비활성화 필요.
               .csrf(AbstractHttpConfigurer::disable)
               .authorizeHttpRequests((authorizeRequests) ->
                               authorizeRequests.anyRequest().permitAll());

   - 참고 블로그
     - CSRF 비활성화 필요
       : https://assu10.github.io/dev/2023/12/17/springsecurity-csrf/
     - 추가설정
       ex) httpBasic diable 등
       : https://hipopatamus.tistory.com/72
     - https://velog.io/@readnthink/Spring-Security-%EC%97%90%EB%9F%AC
       https://ttasjwi.tistory.com/148
       https://velog.io/@woosim34/Spring-Spring-Security-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EA%B5%AC%ED%98%84SessionSpring-boot3.0-%EC%9D%B4%EC%83%81


1. SecurityConfiguration.java
   - 스프링 시큐리티 설정정보.

   - WebSecurityConfigurerAdapter 상속받아 구현.
     -> 현재 3.4.1 버전 사용중이라고 생각했지만 실제로 라이브러리를 열어보면
        spring-security-config:6.4.2로 6.4.2버전을 사용중이다.
        Spring Security 5.2.0 이상에서는 완전히 제거되어 사용불가.
        스프링 공식 문서에서는 WebSecurityConfigAdapter 상속 대체 방법으로 @Bean을 생성하여 구성하는 기능을 권장.
     - 참고 블로그
       : https://sohyeonnn.tistory.com/46
       : https://velog.io/@pjh612/Deprecated%EB%90%9C-WebSecurityConfigurerAdapter-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8C%80%EC%B2%98%ED%95%98%EC%A7%80
       : https://this-circle-jeong.tistory.com/162

   - @EnableWebSecurity 어노테이션 적용필수.

   - @EnableGlobalMethodSecurity(prePostEnabled = true)
     : configure() 메서드에서 http.antMatches().gasRole()을 통해
       특정 권한을 가진 사람만 해당 경로에 접근할 수 있도록 설정가능하지만
       hasRole() 권한체크를 해당 설정파일 외부에서 어노테이션으로 처리가능하도록 하기위해 추가하는 어노테이션.
       (해당 어노테이션을 사용해 '필요권한설정'을 해당 설정파일에서 모두 부여하지않고
        실제 권한을 적용할 컨트롤러에서 직접설정 가능하도록 한다.)

   - rest api로 JWT 토큰 인증방식을 구현 시 설정필수
     1. 사용하지 않을 부분에 대한 disable 처리
        - http.httpBasic().disable().csrf().disable()
     2. session stateless 처리
        : 로그인을 session이 아닌 JWT 토큰으로 구현했기에 상태정보를 저장하지 않는 stateless 특징가짐.
          (세션으로 구현시에는 상태를 가지고 jwt 토큰을 이용해 구현시 상태를 가지지않음.)
        - sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)

   - permitAll()
     : 해당경로에 대해 인증없이 무조건적으로 권한허용.
     : 회원가입, 로그인의 경우는 토큰없이 접근가능해야함. (JWT 토큰은 로그인 후 생성되므로.)
     - .and()
        .authorizeRequests()
        .antMatchers("/**/signup", "/**/signin").permitAll()

   - addFilterBefore() : 필터의 실행 순서 정의
     - UsernamePasswordAuthenticationFilter.class : 스프링에서 정의되어있는 필터
     - .and()
       .addFilterBefore(this.authenticationFilter, UsernamePasswordAuthenticationFilter.class);


2. 스프링 시큐리티
   : 인증, 인가 및 보호 기능을 제공하는 프레임워크.
   - 유저 정보를 인증, 인증된 유저의 정보 권한을 추출해 요청한 자원에 접근 권한이 있는지 판단해 보안 수행.
   - 보안 작업은 까다롭지만 스프링 시큐리티를 이용하면 제공 기능들을 이용해 보다 쉽게 보안작업 진행가능.
   - 스프링 시큐리티는 필터 방식으로 동작.
     : 인증, 인가에 대한 처리를 스프링 시큐리티 내부적 필터를 순차적으로 통과하면서 수행.
     - 설정에 따라 필요한 필터가있고 필요없는 필터가 있을 수 있음.
   - 스프링 시큐리티 설정
     : WebSecurityConfigurerAdapter를 구현한 Config 설정 파일로 생성.
   - HttpSecurity : 실제 필터를 생성
                    해당 필터들은 WebSecurity 클래스를 통해 FilterChainProxy의 인자들로 전달됨.
                    사용자가 요청 > DelegatingFilterProxy가 가장 먼저 그 요청 받음 > FilterChainProxy에게 요청 위힘.
                    > 위임받은 요청에 해당하는 SecurityFilterChain이 필터 수행 > 반복...
                  - 커스터마이징 시 chain.doFilter(request, response);를 사용하지 않으면 다음 필터로 넘어가지 않음.

   - 인증(Authentication) : 서비스의 사용자임을 확인
   - 인가(Authorization) : 인증된 사용자가 서비스에 접근 시 요청된 자원에 대한 접근 허가.

   - 참고 블로그
     : https://motti.tistory.com/entry/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0Spring-security%EC%9D%98-%EC%9D%B4%ED%95%B4


3. 중요 필터
   1. SecurityContextPersistenceFilter
      : SecurityContextRepository에서 SecurityContext를 가져오거나 생성. (세션공간)
   2. LogoutFilter
      : 로그아웃 요청 처리
   3. UsernamePasswordAuthenticationFilter
      : ID, Password를 사용하는 실제 Form 기반 유저 인증 처리.
   4. ConcurrentSessionFilter
      : 동시 세션 관련 필터
   5. RememberMeAuthenticationFilter
      : 세션이 사라지거나 만료 되더라도 쿠키 또는 DB를 사용하여 저장된 토큰 기반으로 인증 처리.
   6. AnonymousAuthenticationFilter
      : 사용자 정보가 인증되지 않았다면 익명 사용자 토큰 반환
   7. SessionManagementFilter
      : 로그인 후 Session과 관련된 작업 처리.
   8. ExceptionTranslationFilter
      : 필터 체인 내에서 발생되는 인증, 인가 예외 처리.
   9. FilterSecurityInterceptor
      : 권한 부여, 권한 관련 결정을 AccessDscisionManager에게 위임해 권한부여 결정 및 접근 제어 처리.


4. 시큐리티 아키텍처
   : 시큐리티는 자신만의 세션공간인 SecurityContext를 가진다.
     해당 세션에 들어갈 수 있는 객체는 Authentication 객체 뿐이다.
     Authentication 객체는 UserDetails, OAuth2User 객체를 가질 수 있다.
   - 세션에 Authentication 객체가 들어가는 것
     = 로그인 되었다는 의미
   - SecurityContext에 Authentication 객체가 들어갈 수 있도록 Authentication 객체를 만드는 것이 스프링 시큐리티의 핵심.



5. 비밀번호 암호화 인터페이스 PasswordEncoder
   - 참고 블로그
     : https://hou27.tistory.com/entry/Spring-Boot-Spring-Security-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%95%94%ED%98%B8%ED%99%94

   - PswwaordEncoder 인터페이스 정의
       public interface PasswordEncoder {
           // 비밀번호 암호화 (회원가입 시 사용)
           String encode(CharSequence rawPassword);

           // 평문 비밀번호, 암호화된 비밀번호 일치여부 확인 (로그인 시 사용)
           boolean matches(CharSequence rawPassword, String encodedPassword);

           default boolean upgradeEncoding(String encodedPassword) {
               return false;
           }
       }





============================== << 회원권한테이블 추가 >> ===============================
- 유저와 권한은 다대다 관계.
  한 유저가 여러 권한을 가질 수 있고, 한 권한도 여러 유저가 사용가능.

- 회원가입 권한추가
  - 참고 블로그
    : https://xooxpeak.tistory.com/entry/%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EA%B6%8C%ED%95%9CRole-%EC%B6%94%EA%B0%80

- 회원과 권한 일대다 관계
  - 참고 블로그
    : https://ttl-blog.tistory.com/126





